#the simplest way, do not meet the requirement of time complexity log(m+n)

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums3 = []
        nums1.append(float('inf'))
        nums2.append(float('inf'))
        i1 = 0
        i2 = 0
        while nums1[i1] != float('inf') or nums2[i2] != float('inf'):
            if nums1[i1] > nums2[i2]:
                nums3.append(nums2[i2])
                i2 += 1
            else:
                nums3.append(nums1[i1])
                i1 += 1
        if(len(nums3) == 1):
            return nums3[0]
        if(len(nums3) % 2) == 0:
            median = (nums3[int(len(nums3)/2)] + nums3[int(len(nums3)/2) - 1])/2
        else:
            median = nums3[int(len(nums3)/2)]
        return median

#After seeing the solutions

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        m, n = len(nums1), len(nums2)
        if m > n:m, n, nums1, nums2 = n, m, nums2, nums1
    
        imin, imax, half_length = 0, m, int((m + n + 1) / 2)
        while imin <= imax:
            i = int((imin + imax) / 2)
            j = half_length - i
        
            if i < m and nums2[j-1] > nums1[i]:
                imin = i + 1
            elif i > 0 and nums1[i-1] > nums2[j]:
                imax = i - 1
            else:
                if i == 0:max_left = nums2[j-1]
                elif j == 0:max_left = nums1[i-1]
                else:max_left = max(nums1[i-1], nums2[j-1])
             
                if (m+n) % 2 == 1:
                    return max_left
            
                if i == m:min_right = nums2[j]
                elif j == n:min_right = nums1[i]
                else:min_right = min(nums1[i], nums2[j])
                
                return (max_left + min_right) / 2
       
       
